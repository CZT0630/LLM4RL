# config.yaml
# 云边端三层架构实验配置
# 基于最新实验设置要求

# 环境配置
environment:
  name: "cloud_edge_env"
  
  # 系统架构参数（按实验设置固定）
  num_devices: 10       # 端侧设备数量（UE）
  num_edges: 5          # 边缘服务器数量（ES）  
  num_clouds: 1         # 云服务器数量（CS）

  # 动作空间配置
  action_space:
    type: "continuous"
    dimension: 4       # [α1, α2, α3, edge_id] 
    
  # 状态空间配置
  state_space:
    normalize: true
    include_task_info: true

# 设备配置（已在代码中硬编码，此处仅作说明）
device_specs:
  user_equipment:
    count: 10
    cpu_frequency_range: [0.5, 1.0]    # GHz，异构配置
    max_cpu_cycles: 500e6               # 500 Mcycles
    battery_capacity: 4000              # mAh
    alpha_ue: 1e-26                     # J/cycle
    transmission_power: 0.5             # W
    transmission_rate_to_edge: 1e9      # 1 Gbps
    
  edge_servers:
    count: 5
    cpu_frequencies: [5, 6, 8, 10, 12]  # GHz，异构配置
    memory_capacity: 16                  # GB
    alpha_es: 3e-26                     # J/cycle
    transmission_rate_to_cloud: 10e9    # 10 Gbps
    
  cloud_servers:
    count: 1
    cpu_frequency: 20                   # GHz
    memory_capacity: 64                 # GB
    alpha_cs: 1e-27                    # J/cycle
    parallel_factor: 4.0               # 并行处理能力

# 网络配置
network:
  ue_to_edge_rate: 1e9      # 1 Gbps (6G无线链路)
  edge_to_cloud_rate: 10e9  # 10 Gbps (光纤有线链路)

# 任务特性配置  
tasks:
  processing_density: 0.2e9  # 0.2 Gcycles/MB
  
  # 任务类型定义
  task_types:
    small:
      data_size_range: [1, 5]      # MB
      description: "传感器数据、文本处理"
      weight: 0.4                  # 40%概率
      deadline_factor: [2.0, 5.0]  # 本地执行时间的2-5倍
      
    medium:
      data_size_range: [10, 50]    # MB  
      description: "短视频预处理、轻度图像识别"
      weight: 0.4                  # 40%概率
      deadline_factor: [1.5, 3.0]  # 本地执行时间的1.5-3倍
      
    large:
      data_size_range: [100, 200]  # MB
      description: "高清视频分析、复杂AI推理"
      weight: 0.2                  # 20%概率
      deadline_factor: [1.2, 2.0]  # 本地执行时间的1.2-2倍

# MADDPG算法配置
maddpg:
  num_agents: 10             # 等于设备数量
  
  # 网络结构
  actor_hidden_dims: [128, 64]
  critic_hidden_dims: [256, 128]
  
  # 训练参数
  max_episodes: 1000
  max_steps: 200
  lr_actor: 0.001
  lr_critic: 0.002
  gamma: 0.99               # 折扣因子
  tau: 0.005                # 软更新系数
  
  # 经验回放
  buffer_size: 100000
  batch_size: 64
  
  # 探索噪声
  noise_type: "ou"          # Ornstein-Uhlenbeck噪声
  noise_theta: 0.15
  noise_sigma: 0.2
  noise_decay: 0.995

# LLM配置
llm:
  # LLM服务配置
  base_url: "http://10.200.1.35:8888/v1"
  model_name: "qwen2.5-14b-instruct"
  api_key: "sk-no-key-required"
  
  # 连接参数
  timeout: 120              # 连接超时时间(秒)
  read_timeout: 300         # 读取超时时间(秒)
  max_retries: 1            # 最大重试次数
  
  # LLM指导参数
  temperature: 0.7
  max_tokens: 1024
  enable_expert_guidance: true
  guidance_frequency: 10    # 每10步请求一次LLM指导

# 原训练配置（已合并到下方新配置中）
# training_old:
#   total_episodes: 2000
#   max_episode_steps: 100
#   eval_episodes: 10
#   eval_frequency: 100
#   save_frequency: 500
#   model_save_path: "results/models"
#   log_frequency: 10
#   tensorboard_log: true
  
# 随机种子
seed: 42

# 实验假设条件
assumptions:
  - "网络带宽和计算资源在短时窗口内稳定"
  - "任务分割后无依赖关系，可按任意比例划分和卸载"  
  - "边缘服务器和云端的资源分配为无优先级的非抢占式调度"
  - "采用时分多址(TDMA)技术避免干扰"
  - "云服务器视为无计算资源瓶颈，支持并行处理"

# 设备模型配置
device_config:
  # 端侧设备配置
  user_equipment:
    cpu_frequency_range: [0.5, 1.0]  # GHz，异构配置
    max_cpu_cycles: 500e6             # 最大500Mcycles
    battery_capacity: 4000            # mAh
    memory_capacity: 2.0              # GB
    transmission_power: 0.5           # W
    energy_coefficient: 1e-26         # J/cycle
    
  # 边缘服务器配置
  edge_server:
    cpu_frequencies: [5, 6, 8, 10, 12]  # GHz，异构配置
    memory_capacity: 16.0                # GB
    energy_coefficient: 3e-26            # J/cycle
    ue_to_es_bandwidth: 1e9              # 1Gbps
    
  # 云服务器配置  
  cloud_server:
    cpu_frequency: 20.0               # GHz
    memory_capacity: 64.0             # GB
    parallel_capability: 4            # 并行处理能力
    energy_coefficient: 1e-27         # J/cycle
    es_to_cs_bandwidth: 10e9          # 10Gbps

# 任务生成配置
task_config:
  # 任务类型配置
  task_types:
    small:
      data_range: [1, 5]           # MB
      probability: 0.4
    medium:
      data_range: [10, 50]         # MB
      probability: 0.4
    large:
      data_range: [100, 200]       # MB
      probability: 0.2
      
  # 任务属性配置
  processing_density: 0.2e9        # 0.2 Gcycles/MB
  deadline_multiplier: 2.0         # 截止时间乘数
  arrival_pattern: "poisson"       # 到达模式
  
# 训练配置
training:
  # 基本训练参数
  episodes: 1000                   # 训练Episodes数
  max_steps_per_episode: 100       # 每Episode最大步数
  train_start_episode: 50          # 开始训练的Episode
  
  # 网络参数
  lr_actor: 0.001                  # Actor学习率
  lr_critic: 0.001                 # Critic学习率
  gamma: 0.99                      # 折扣因子
  tau: 0.01                        # 软更新系数
  
  # 经验回放
  buffer_size: 100000              # 缓冲区大小
  batch_size: 64                   # 批大小
  
  # LLM知识蒸馏
  llm_distill_weight: 0.1          # LLM知识蒸馏损失权重
  llm_consult_frequency: 1         # LLM咨询频率（每几个step咨询一次）
  
  # 探索策略
  noise_decay: 0.995               # 噪声衰减
  min_noise: 0.01                  # 最小噪声
  
  # 保存设置
  save_frequency: 200              # 模型保存频率
  log_frequency: 50                # 日志打印频率

# LLM配置
llm_config:
  # 模型配置
  provider: "openai"               # LLM提供商
  model: "gpt-3.5-turbo"          # 模型名称
  api_key: "your-api-key-here"     # API密钥
  base_url: null                   # 自定义API地址
  
  # 生成参数
  temperature: 0.7                 # 生成温度
  max_tokens: 1000                 # 最大token数
  timeout: 30                      # 超时时间（秒）
  
  # 重试配置
  max_retries: 3                   # 最大重试次数
  retry_delay: 1                   # 重试延迟（秒）
  
  # 提示配置
  system_prompt: |
    您是一个云边端计算卸载决策专家。
    请根据设备状态、任务特征和网络条件，
    为每个任务提供最优的三元分割卸载策略。
  
  decision_format: |
    对于每个任务，请返回决策格式：
    {
      "task_id": 任务ID,
      "local_ratio": 本地处理比例(0-1),
      "edge_ratio": 边缘处理比例(0-1), 
      "cloud_ratio": 云端处理比例(0-1),
      "edge_server_id": 边缘服务器ID(0-4),
      "reasoning": "决策理由"
    }

# 评估配置
evaluation:
  test_episodes: 100               # 测试Episodes数
  metrics:
    - "latency"                    # 时延
    - "energy"                     # 能耗
    - "reward"                     # 奖励
    - "success_rate"               # 成功率
    - "resource_utilization"       # 资源利用率
  
  baseline_methods:
    - "local_only"                 # 纯本地执行
    - "random_offload"             # 随机卸载
    - "greedy_offload"             # 贪婪卸载
    - "traditional_maddpg"         # 传统MADDPG

# 结果保存配置
results:
  base_dir: "results"              # 结果基础目录
  subdirs:
    models: "models"               # 模型保存目录
    logs: "logs"                   # 日志目录
    plots: "plots"                 # 图像目录
    data: "data"                   # 数据目录
  
  # 文件格式
  model_format: "pytorch"          # 模型格式
  data_format: "json"              # 数据格式
  plot_format: "png"               # 图像格式

# 调试配置
debug:
  enabled: false                   # 是否启用调试模式
  log_level: "INFO"                # 日志级别
  save_trajectories: false        # 是否保存轨迹
  render_environment: false       # 是否渲染环境
  
# 并行配置
parallel:
  enabled: false                   # 是否启用并行训练
  num_workers: 4                   # 工作进程数
  device: "auto"                   # 设备选择（auto/cpu/cuda）