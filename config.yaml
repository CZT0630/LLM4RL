# config.yaml
# 云边端三层架构实验配置 - 简化设备模型版本
# UE: CPU频率 + 电池 + 任务负载
# ES: CPU频率 + 任务负载
# CS: CPU频率（资源无限）

# 环境配置
environment:
  name: "cloud_edge_env"
  
  # 系统架构参数（按简化要求调整）
  num_devices: 10       # 端侧设备数量（UE）
  num_edges: 5          # 边缘服务器数量（ES，增加到5个）  
  num_clouds: 1         # 云服务器数量（CS）

  # 动作空间配置
  action_space:
    type: "continuous"
    dimension: 4       # [α1, α2, α3, edge_id] 
    
  # 状态空间配置（简化版）
  state_space:
    normalize: true
    include_task_info: true
    # 简化后的状态维度：
    # UE: 3个特征 × 10设备 = 30
    # ES: 2个特征 × 5服务器 = 10  
    # CS: 1个特征 × 1服务器 = 1
    # 任务: 6个特征 × 10任务 = 60
    # 总计: 101维

# 设备配置（简化版）
device_specs:
  user_equipment:
    count: 10
    # 简化属性：CPU频率 + 电池 + 任务负载
    cpu_frequency_range: [0.5, 1.0]    # GHz，异构配置
    battery_capacity: 4000              # mAh
    alpha_ue: 1e-26                     # J/cycle（能耗系数）
    transmission_power: 0.5             # W（传输功率）
    
    # 差异化通信配置
    transmission_rate_to_edge: 1e9      # 1 Gbps（UE→边缘，6G无线）
    transmission_rate_to_cloud: 100e6   # 100 Mbps（UE→云端，经边缘中转，总延迟更高）
    
  edge_servers:
    count: 5
    # 简化属性：CPU频率 + 任务负载
    cpu_frequencies: [5, 6, 8, 10, 12]  # GHz，异构配置
    alpha_es: 3e-26                     # J/cycle（能耗系数）
    transmission_rate_to_cloud: 10e9    # 10 Gbps（边缘→云端）
    
  cloud_servers:
    count: 1
    # 简化属性：仅CPU频率（资源无限）
    cpu_frequency: 20                   # GHz
    alpha_cs: 1e-27                    # J/cycle（极低能耗）
    parallel_factor: 8.0               # 强大的并行处理能力

# 网络配置（差异化通信延迟）
network:
  # 边缘通信：快速、低延迟
  ue_to_edge_rate: 1e9        # 1 Gbps (6G无线，直连)
  
  # 云端通信：慢速、高延迟（需要中转）  
  ue_to_cloud_total_rate: 100e6  # 100 Mbps (UE→边缘→云的总带宽)
  edge_to_cloud_rate: 10e9    # 10 Gbps (边缘→云端，光纤)
  
  # 延迟模型说明：
  # - 边缘卸载：UE直接传输到边缘，低延迟
  # - 云端卸载：UE→边缘→云端的两跳传输，高延迟
  # - 云端资源无限，无等待时间
  # - 边缘资源有限，存在队列等待

# 任务特性配置  
tasks:
  processing_density: 0.2e9  # 0.2 Gcycles/MB
  
  # 任务类型定义
  task_types:
    small:
      data_range: [1, 5]       # MB
      description: "传感器数据、文本处理"
      probability: 0.4         # 40%概率
      deadline_multiplier: 2.5 # 本地执行时间的2.5倍
      
    medium:
      data_range: [10, 50]     # MB  
      description: "短视频预处理、轻度图像识别"
      probability: 0.4         # 40%概率
      deadline_multiplier: 2.0 # 本地执行时间的2倍
      
    large:
      data_range: [100, 200]   # MB
      description: "高清视频分析、复杂AI推理"
      probability: 0.2         # 20%概率
      deadline_multiplier: 1.5 # 本地执行时间的1.5倍

# MADDPG算法配置
maddpg:
  num_agents: 10             # 等于设备数量
  
  # 网络结构
  actor_hidden_dims: [128, 64]
  critic_hidden_dims: [256, 128]
  
  # 训练参数（优化版）
  max_episodes: 1000         # 训练轮数
  max_steps: 100            # 每轮最大步数
  train_frequency: 50        # 🆕 每50步训练一次（平衡训练效率和稳定性）
  
  # 学习率
  lr_actor: 0.001
  lr_critic: 0.002
  gamma: 0.99               # 折扣因子
  tau: 0.005                # 软更新系数
  
  # 经验回放
  buffer_size: 100000
  batch_size: 64
  
  # 探索噪声
  noise_type: "ou"          # Ornstein-Uhlenbeck噪声
  noise_theta: 0.15
  noise_sigma: 0.2
  noise_decay: 0.995

# LLM+MADDPG算法配置
llm_maddpg:
  # 继承MADDPG基础配置
  inherit_from: "maddpg"
  
  # LLM特定训练参数
  max_episodes: 1000         # 🆕 LLM指导下可以用更少轮数达到收敛
  max_steps: 100           # 🆕 每轮步数可以适当减少
  train_frequency: 50      # 🆕 每50步训练一次（给LLM指导更多发挥空间）
  
  # LLM指导策略
  llm_episode_interval: 2   # 🆕 每2个Episode使用一次LLM指导
  llm_distill_weight: 0.1   # 🆕 LLM知识蒸馏权重（固定权重模式下使用）
  
  # 🆕 三阶段退火策略配置
  use_annealing: true                     # 启用退火策略
  initial_llm_distill_weight: 0.8        # 初始蒸馏权重（高权重，充分利用专家知识）
  constant_llm_distill_weight: 0.15      # 恒定期蒸馏权重（平衡探索与利用）
  final_llm_distill_weight: 0.0          # 最终蒸馏权重（完全自主学习）
  stage1_end_episode: 300                 # 阶段1结束轮数（专家指导阶段）
  stage2_end_episode: 700                 # 阶段2结束轮数（平衡探索阶段）
  # 阶段3从701轮开始，在100轮内快速退火到0
  
  # 早期探索增强
  exploration_episodes: 900  # 🆕 前80%轮数增加探索（0.9 * 1000）

# LLM配置
llm:
  # LLM服务配置（qwen3-14b）
  base_url: "http://10.200.1.35:8888/v1/completions"
  model_name: "qwen3-14b"
  api_key: ""
  
  # # 阿里云LLM服务配置（qwen-plus）
  # base_url: "https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions"
  # model_name: "qwen-plus-latest"
  # api_key: "sk-1907a18fea6640c6aac5b4194920169f"
  
  # 连接参数
  timeout: 120              # 连接超时时间(秒)
  read_timeout: 300         # 读取超时时间(秒)
  max_retries: 1            # 最大重试次数
  
  # LLM指导参数
  temperature: 0.3
  max_tokens: 32768         # 最大token数，确保完整响应
  enable_expert_guidance: true

# 随机种子
seed: 42

# 测试配置
testing:
  num_episodes: 200         # 🆕 测试轮数（从2000减少到200，提高测试效率）
  max_steps: 100           # 🆕 测试时每轮最大步数
  save_results: true        # 保存测试结果
  detailed_logging: true    # 详细日志

# 训练配置（统一管理）
training:
  # 通用训练参数
  save_frequency: 100       # 模型保存频率（每100轮保存一次）
  log_frequency: 20         # 日志输出频率（每20轮输出一次）
  plot_frequency: 50        # 绘图频率（每50轮绘制一次）
  
  # 训练策略
  warm_up_episodes: 0      # 🆕 预热轮数（不进行训练，只收集经验）
  early_stopping_patience: 200  # 🆕 早停耐心值（200轮无改善则停止）
  convergence_threshold: 0.01   # 🆕 收敛阈值（奖励变化小于此值认为收敛）
  
  # 训练模式选择
  algorithms:
    maddpg:
      enabled: true
      max_episodes: 1000
      max_steps: 100
      train_frequency: 50
      
    llm_maddpg:
      enabled: true  
      max_episodes: 1000
      max_steps: 100
      train_frequency: 50
      
    llm_only:
      enabled: true
      max_episodes: 1000     # 🆕 纯LLM算法episode数
      max_steps: 1
      train_frequency: null  # 纯LLM不需要训练频率

# 奖励函数配置
reward:
  # 奖励权重
  latency_weight: 10.0      # 时延改善奖励权重
  energy_weight: 5.0        # 能耗改善奖励权重
  deadline_weight: 5.0      # 截止时间满足奖励权重
  balance_weight: 0.01      # 负载均衡奖励权重
  
  # 惩罚配置
  overtime_penalty: 10.0    # 超时惩罚权重
  communication_penalty: 0.1 # 过度通信惩罚（鼓励减少不必要的云端卸载）

# 🆕 实验对比配置
comparison:
  # 对比实验设置
  run_all_algorithms: true   # 是否运行所有算法进行对比
  
  # 统一测试参数
  test_episodes: 100
  test_steps: 100
  
  # 性能指标计算
  metrics_window: 50        # 计算平均性能的窗口大小
  
  # 结果保存
  save_comparison_plots: true
  save_detailed_logs: true

# 简化设计原则
design_principles:
  - "边缘场景的时延敏感性：队列等待时间比资源利用率更重要"
  - "CPU频率是设备计算能力的最直接指标"
  - "电池约束是移动设备的根本限制"
  - "任务负载 = 当前执行剩余时间 + 队列中所有任务处理时间"
  - "云服务器资源无限，无任务负载概念"
  - "差异化通信延迟：边缘快速、云端慢速，平衡计算卸载选择"
  - "训练频率优化：MADDPG更频繁训练，LLM+MADDPG给专家指导更多空间"

# 实验假设条件（更新）
assumptions:
  - "网络带宽在短时窗口内稳定，但边缘和云端通信存在显著延迟差异"
  - "任务分割后无依赖关系，可按任意比例划分和卸载"  
  - "边缘服务器资源有限，存在队列等待；云服务器资源无限"
  - "采用时分多址(TDMA)技术避免干扰"
  - "UE电池容量有限，需要考虑能耗约束"
  - "云端卸载经边缘服务器中转，总通信延迟更高"
  - "🆕 训练频率差异化：纯强化学习需要更频繁更新，专家指导学习需要更多时间消化知识"

# 性能指标
metrics:
  - "平均任务完成时延"
  - "总能耗消耗"
  - "截止时间满足率"
  - "边缘服务器负载均衡度"
  - "通信效率（边缘vs云端卸载比例）"
  - "设备电池消耗率"
  - "🆕 训练收敛速度"
  - "🆕 算法性能对比"